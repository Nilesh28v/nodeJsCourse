// let prime_numbers = [2, 3, 5, 7, 9, 11];
// let removedElement = prime_numbers.splice(4, 1, 13);
// console.log(removedElement);
// console.log(prime_numbers);



// const a=[{salary:10000

// },{
//     salary:20000

// },{
//     salary:30000

// }]
// a.forEach((salary)=>{
//     result=salary+result
// })


// function a(){
//     let c=0;
//     return c;

// }
// a()
// console.log(typeof(c));  //it will give undefined



// function add(...a){
//     let i=0;
//     let sum=0;
//     for(i of a){
//         sum +=i
//     }
//     console.log(sum);

// }
// add(10,20,30)



const a=1
const b= a++ + ++a;
console.log(b);
console.log(a);




Abdul Rahman3:03 PM
arrow function
normal function
const user1 = {
  firstName: 'Fission',
  lastName: 'Labs',
  fullName: () => {
    return `${this.firstName} ${this.lastName}`;
  }
}

const user2 = {
  firstName: 'Fission',
  lastName: 'Labs',
  fullName: function () {
    return `${this.firstName} ${this.lastName}`;
  }
}

console.log(user1.fullName());
console.log(user2.fullName());

Abdul Rahman3:07 PM
const array1 = [1, 2, 4];

Array.prototype.push.apply(array1, [6, 7, 8])

Abdul Rahman3:11 PM
const p1 = Promise.resolve(1);
const p2 = Promise.reject(2);
const p3 = Promise.resolve(3);

Promise.all([p1, p2, p3]).then((res) => {
  console.log('Promise resolved', res);
}).catch((error) => {
  console.error('Promise rejected', error);
})

Abdul Rahman3:13 PM
async function fun(id) {
  console.log(id, "start");
  const arr = ["a", "b", "c"];
  await Promise.resolve("d").then(result => console.log(id, result))
  setTimeout(() => {
    arr.forEach(item => {
      console.log(id, item);
      // while(true) {}
    })

  })
  await Promise.resolve("e").then(result => console.log(id, result))
  console.log(id, "end")
}
fun("id1")
fun("id2")
Abdul Rahman3:21 PM
stream
Abdul Rahman3:23 PM
cluster
spawn vs fork
PUT vs PATCH
Abdul Rahman3:25 PM
API vs REST API
Abdul Rahman3:28 PM
1. CORS
2. NO Response
3. 500 Internal server error
Abdul Rahman3:31 PM
docker
microservices
monolithic
Abdul Rahman3:33 PM
mongo object id
Abdul Rahman3:36 PM
body-parser
Abdul Rahman3:37 PM
middleware
Abdul Rahman3:38 PM
next() ?
Abdul Rahman3:39 PM
refresh token
session COOKIES
http stateful or stateless
Abdul Rahman3:41 PM
payload
params
query params
Abdul Rahman3:42 PM
route lvel
Abdul Rahman3:44 PM
ts-node
express
hapi
server-less + express







var arr1= [1, 2, 3, 4, 5]
var arr2 = [10, 8, 3, 4, 3, 8, 6]
var arr3=[]
var position = 2

for(var i=0;i<arr1.length;i++){
    if(i==position){
        for(var j=0;j<arr2.length;j++){
            arr3.push(arr2[j])
        }
    }
    arr3.push(arr1[i])
}
console.log(arr3);


// ***************FACILE*****************

// function sayHi(){
//     console.log(name);
//     console.log(age);
//     var name = 'Valmik';
//     let age = 21;
// }
// sayHi();


// let a = 3;
// let b = new Number(3);
// let c = 3;
// console.log(typeof(new));
// console.log(a==b);
// console.log(a===b);
// console.log(a===c);



// const fs = require('fs');
// const data = fs.readFileSync('/file.md'); // will block or not??
// console.log(data);
// moreWork(); // When will it execute?? after console or before console?



// const fs = require('fs');
// fs.readFile('/file.md', (err, data) => {
//   if (err) throw err;
//   console.log(data);
// });
// moreWork();  // When will it execute?? after console or before console?




// const shape = {
//   radius:10,
//   diameter(){
//       return this.radius*2;
//   },
//   perimeter: () => {
//       console.log('this.radius', this.radius);
//       2 * Math.PI * this.radius
//   }
// };
// console.log(shape.diameter());
// console.log(shape.perimeter());





//valueFy

S = ( )

S  = ‘( ( ( ( )’’ = false

S = ‘()’ true


S = ‘((()))()’ true


)( = > false


Function validatePranthesis(S) {
	arr=S.split(“”);
	len=arr.length;
	for(var i=0;i<len;i++){
Let count=0;
if(arr[i]==”(” ){
count+=1	
}
Else{
Return true;


—-----------------------



while(true) {
setTimeout({
   console.log('ABC');
 }, 0);
 Promise.resolve()
   .then(() => {
     console.log('XYZ');
   })
 
 console.log('PQR')
}
 
 
PQR
xyz
ABC
 
 
 
 
 
for(let i = 0; i < 5; i++) {
	
setTimeout({
   	console.log(i);
 	}, 0);
}
 
5
5
5
 
 
0
1
2
3
 
 
 
 
 

